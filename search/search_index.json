{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Vis\u00e3o Geral - ReMed.io","text":"<p>ReMed.io \u00e9 um sistema de gerenciamento de estoque para farm\u00e1cias, desenvolvido com o objetivo de digitalizar e automatizar os processos de controle de produtos, vendas e movimenta\u00e7\u00f5es de estoque. Seu principal objetivo \u00e9 fornecer uma plataforma eficiente para o gerenciamento de medicamentos, cosm\u00e9ticos e suplementos, garantindo rastreabilidade, seguran\u00e7a e precis\u00e3o nas opera\u00e7\u00f5es de entrada, sa\u00edda e comercializa\u00e7\u00e3o de itens farmac\u00eauticos.</p>"},{"location":"#tecnologias-utilizadas","title":"Tecnologias Utilizadas","text":"Camada Ferramentas / Tecnologias Frontend React, TypeScript, TailwindCSS Backend FastAPI, Python 3.11 Banco de Dados PostgreSQL, DBeaver DevOps Docker, Docker Compose Outras libs Pydantic, SQLAlchemy, Pyenv"},{"location":"#arquitetura-do-sistema","title":"Arquitetura do sistema","text":"<p>O projeto adota uma arquitetura modular baseada em reposit\u00f3rios independentes, organizados de forma a promover separa\u00e7\u00e3o de responsabilidades e facilidade de manuten\u00e7\u00e3o. A aplica\u00e7\u00e3o \u00e9 composta por tr\u00eas principais reposit\u00f3rios:</p> <ul> <li><code>Backend-estoque</code>: API RESTful desenvolvida em Python com FastAPI, estruturada em camadas segundo o padr\u00e3o MVC (Model-View-Controller).</li> <li><code>Frontend</code>: Aplica\u00e7\u00e3o React respons\u00e1vel pela interface do usu\u00e1rio, comunica\u00e7\u00e3o com a API e experi\u00eancia interativa.</li> <li><code>Docs</code>: Documenta\u00e7\u00e3o t\u00e9cnica e gerencial do projeto, escrita em Markdown.</li> </ul>"},{"location":"#comunicacao-entre-os-componentes","title":"Comunica\u00e7\u00e3o entre os Componentes","text":"<ul> <li>O frontend comunica-se com o backend via requisi\u00e7\u00f5es HTTP usando <code>axios</code>, consumindo endpoints REST da API FastAPI.</li> <li>O backend persiste e consulta dados no banco de dados PostgreSQL por meio do SQLAlchemy.</li> <li>Todas as regras de neg\u00f3cio ficam encapsuladas em servi\u00e7os no backend, mantendo o frontend simples e desacoplado.</li> </ul>"},{"location":"#diagrama-de-classes","title":"Diagrama de Classes","text":"<p>O diagrama de classes representa a estrutura orientada a objetos do sistema ReMed.io adaptado do Diagrama de Classes do projeto antigo. </p> <p> </p>"},{"location":"backlog/","title":"Product Backlog","text":"<p>Este backlog cont\u00e9m as funcionalidades principais do sistema, com base nas hist\u00f3rias de usu\u00e1rios definidas a partir do Diagrama de Classe.</p>"},{"location":"backlog/#board-kanban","title":"Board Kanban","text":""},{"location":"backlog/#historias","title":"\ud83d\udd34 Hist\u00f3rias","text":""},{"location":"backlog/#historia-1-cadastro-de-produtos","title":"Hist\u00f3ria 1 \u2014 Cadastro de Produtos","text":"<p>Como administrador Quero cadastrar produtos no sistema Para manter o controle de estoque</p> <p>Crit\u00e9rios de aceita\u00e7\u00e3o:</p> <ul> <li>Deve ser poss\u00edvel cadastrar: c\u00f3digo de barras, nome, pre\u00e7o, validade e fornecedor.</li> <li>Produto deve pertencer a uma subcategoria: Medicamento, Cosm\u00e9tico ou Suplemento.</li> <li> <p>Cada subclasse deve aceitar atributos espec\u00edficos:</p> <ul> <li>Medicamento: tarja, necessita receita, princ\u00edpio ativo.</li> <li>Cosm\u00e9tico: tipo de pele, faixa et\u00e1ria.</li> <li>Suplemento Alimentar: sabor, tipo, restri\u00e7\u00f5es.</li> </ul> </li> </ul>"},{"location":"backlog/#historia-2-cadastro-de-fornecedores","title":"Hist\u00f3ria 2 \u2014 Cadastro de Fornecedores","text":"<p>Como administrador Quero cadastrar fornecedores Para associ\u00e1-los aos produtos da farm\u00e1cia</p> <p>Crit\u00e9rios de aceita\u00e7\u00e3o:</p> <ul> <li>Deve ser poss\u00edvel cadastrar nome, CNPJ e dados de contato.</li> </ul>"},{"location":"backlog/#historia-3-cadastro-de-estoque","title":"Hist\u00f3ria 3 \u2014 Cadastro de Estoque","text":"<p>Como administrador Quero registrar dados de estoque Para manter controle da localiza\u00e7\u00e3o e quantidade m\u00ednima</p> <p>Crit\u00e9rios de aceita\u00e7\u00e3o:</p> <ul> <li>Deve ser poss\u00edvel definir local de armazenamento, quantidade m\u00ednima e quantidade atual.</li> </ul>"},{"location":"backlog/#historia-4-movimentacao-de-estoque","title":"Hist\u00f3ria 4 \u2014 Movimenta\u00e7\u00e3o de Estoque","text":"<p>Como administrador Quero registrar entradas e sa\u00eddas de produtos Para atualizar corretamente o estoque</p> <p>Crit\u00e9rios de aceita\u00e7\u00e3o:</p> <ul> <li>A movimenta\u00e7\u00e3o deve ter data, tipo (entrada/sa\u00edda), quantidade e produto.</li> <li>Deve atualizar automaticamente a quantidade atual no estoque.</li> </ul>"},{"location":"backlog/#historia-5-consulta-de-estoque","title":"Hist\u00f3ria 5 \u2014 Consulta de Estoque","text":"<p>Como administrador Quero consultar os dados do estoque Para acompanhar a quantidade atual e validade dos produtos</p> <p>Crit\u00e9rios de aceita\u00e7\u00e3o:</p> <ul> <li>Deve listar quantidade, localiza\u00e7\u00e3o e validade.</li> <li>Produtos vencidos ou com estoque abaixo do m\u00ednimo devem ser destacados.</li> </ul>"},{"location":"backlog/#historia-6-relatorio-de-produtos-vencidos","title":"Hist\u00f3ria 6 \u2014 Relat\u00f3rio de Produtos Vencidos","text":"<p>Como administrador Quero gerar um relat\u00f3rio de produtos vencidos Para tomar a\u00e7\u00f5es corretivas no estoque</p> <p>Crit\u00e9rios de aceita\u00e7\u00e3o:</p> <ul> <li>Deve listar produtos cujo campo validade j\u00e1 passou.</li> </ul>"},{"location":"backlog/#historia-7-relatorio-de-movimentacoes","title":"Hist\u00f3ria 7 \u2014 Relat\u00f3rio de Movimenta\u00e7\u00f5es","text":"<p>Como administrador Quero gerar relat\u00f3rios de movimenta\u00e7\u00f5es Para visualizar o hist\u00f3rico de entradas e sa\u00eddas</p> <p>Crit\u00e9rios de aceita\u00e7\u00e3o:</p> <ul> <li>Deve conter data, tipo, quantidade e produto.</li> </ul>"},{"location":"backlog/#historia-8-registro-de-venda","title":"Hist\u00f3ria 8 \u2014 Registro de Venda","text":"<p>Como atendente Quero registrar vendas de produtos Para realizar o controle financeiro</p> <p>Crit\u00e9rios de aceita\u00e7\u00e3o:</p> <ul> <li>Deve ser poss\u00edvel selecionar um ou mais produtos.</li> <li>Deve calcular o valor total automaticamente.</li> <li>Deve gerar comprovante textual.</li> </ul>"},{"location":"backlog/#em-andamento","title":"\ud83d\udfe1 Em andamento","text":"<p>hist\u00f3rias que est\u00e3o em desenvolvimento.</p>"},{"location":"backlog/#concluido","title":"\ud83d\udfe2 Conclu\u00eddo","text":"<p>hist\u00f3rias que j\u00e1 foram finalizadas.</p>"},{"location":"projeto-antigo/","title":"Projeto Antigo - Farm\u00e1cia da M\u00e1rcia","text":"<p>O Projeto Farm\u00e1cia da M\u00e1rcia foi desenvolvido inicialmente como parte da disciplina de Orienta\u00e7\u00e3o a Objetos com o objetivo de criar um sistema simples de gerenciamento de estoque farmac\u00eautico. A aplica\u00e7\u00e3o permite que o administrador visualize, adicione, remova e edite produtos dispon\u00edveis em sua farm\u00e1cia por meio de uma interface</p>"},{"location":"projeto-antigo/#tecnologias-utilizadas","title":"Tecnologias Utilizadas","text":"Camada Ferramentas / Tecnologias Frontend Java Swing Backend Java 11 Banco de Dados MySQL Testes JUnit Outras libs  Maven, Hibernate (JPA)"},{"location":"projeto-antigo/#arquitetura-original","title":"Arquitetura Original","text":"<p>A arquitetura do projeto foi constru\u00edda em Java utilizando o padr\u00e3o orientado a objetos cl\u00e1ssico. Ela se baseia em tr\u00eas principais camadas:</p> <ul> <li><code>Modelo (Model)</code>: Representa as entidades do dom\u00ednio, como <code>Produto</code>, <code>Medicamento</code>, <code>Cosmetico</code> e <code>Farmacia</code>.</li> <li><code>Persist\u00eancia (DAO)</code>: Camada respons\u00e1vel pelo gerenciamento dos dados via JPA/Hibernate com banco de dados MySQL.</li> <li><code>Interface (View)</code>: Intera\u00e7\u00e3o via console com menus de sele\u00e7\u00e3o para o administrador da farm\u00e1cia.</li> </ul> <p>Al\u00e9m disso, o sistema utiliza o Maven para gerenciamento de depend\u00eancias e o JUnit para testes unit\u00e1rios.</p>"},{"location":"projeto-antigo/#diagrama-de-classes","title":"Diagrama de Classes","text":"<p>A estrutura de classes do sistema \u00e9 apresentada abaixo</p> <p> </p>"},{"location":"projeto-antigo/#principais-componentes","title":"Principais Componentes","text":"<ul> <li> <p>Farmacia   Representa a farm\u00e1cia que possui uma lista de produtos. Respons\u00e1vel por adicionar e remover itens do estoque.</p> </li> <li> <p>Produto (abstrata)   Superclasse para os produtos cadastrados, contendo atributos comuns como nome, fabricante, validade e valor.</p> </li> <li> <p>Medicamento   Subclasse de <code>Produto</code> com informa\u00e7\u00f5es espec\u00edficas como indica\u00e7\u00e3o terap\u00eautica, dosagem e via de administra\u00e7\u00e3o.</p> </li> <li> <p>Cosmetico   Subclasse de <code>Produto</code> contendo dados sobre aplica\u00e7\u00e3o e fun\u00e7\u00e3o est\u00e9tica.</p> </li> </ul>"},{"location":"regra-negocio/","title":"Regras de Neg\u00f3cio - Sistema ReMed.io","text":"<p>Nessa se\u00e7\u00e3o s\u00e3o apresentadas as regras de neg\u00f3cio do sistema baseadas nas melhorias e novas funcionalidades propostas para a aplica\u00e7\u00e3o, oferecendo uma vis\u00e3o clara e objetiva do que ser\u00e1 implementado. </p>"},{"location":"regra-negocio/#objetivos-do-sistema","title":"Objetivos do Sistema","text":"<ul> <li>Armazenar e gerenciar produtos farmac\u00eauticos e cosm\u00e9ticos.</li> <li>Controlar o estoque (entradas, sa\u00eddas e quantidade m\u00ednima).</li> <li>Monitorar produtos vencidos.</li> <li>Registrar movimenta\u00e7\u00f5es de estoque.</li> <li>Associar produtos a fornecedores.</li> <li>Registrar vendas de produtos (funcionalidade adicional para implementa\u00e7\u00e3o futura).</li> </ul>"},{"location":"regra-negocio/#novas-classes-e-funcionalidades","title":"Novas Classes e Funcionalidades","text":""},{"location":"regra-negocio/#1-estoque","title":"1. Estoque","text":"<p>Armazena informa\u00e7\u00f5es de controle de produtos no estoque.</p> <p>Atributos:</p> <ul> <li><code>quantidadeAtual: int</code></li> <li><code>quantidadeMinima: int</code></li> <li><code>localArmazenamento: str</code></li> </ul> <p>M\u00e9todos:</p> <ul> <li><code>adicionarQuantidade(qtd: int)</code></li> <li><code>removerQuantidade(qtd: int)</code></li> <li><code>verificarEstoqueMinimo() -&gt; bool</code></li> <li><code>produtoVencido() -&gt; bool</code></li> </ul>"},{"location":"regra-negocio/#2-movimentacaoestoque","title":"2. MovimentacaoEstoque","text":"<p>Registra o hist\u00f3rico de entradas e sa\u00eddas de produtos.</p> <p>Atributos:</p> <ul> <li><code>data: datetime</code></li> <li><code>tipo: str</code> (<code>Entrada</code> ou <code>Sa\u00edda</code>)</li> <li><code>quantidade: int</code></li> <li><code>produto: Produto</code></li> </ul>"},{"location":"regra-negocio/#3-fornecedor","title":"3. Fornecedor","text":"<p>Representa o fornecedor dos produtos.</p> <p>Atributos:</p> <ul> <li><code>nome: str</code></li> <li><code>cnpj: str</code></li> <li><code>contato: str</code></li> </ul>"},{"location":"regra-negocio/#4-venda","title":"4. Venda","text":"<p>(Funcionalidade futura)</p> <p>Registra uma venda de um ou mais produtos.</p> <p>Atributos:</p> <ul> <li><code>dataVenda: datetime</code></li> <li><code>itens: List[ItemVenda]</code></li> <li><code>valorTotal: float</code></li> </ul>"},{"location":"regra-negocio/#5-itemvenda","title":"5. ItemVenda","text":"<p>Representa um item dentro de uma venda.</p> <p>Atributos:</p> <ul> <li><code>produto: Produto</code></li> <li><code>quantidade: int</code></li> <li><code>precoUnitario: float</code></li> </ul>"},{"location":"regra-negocio/#melhorias-nas-classes-existentes","title":"Melhorias nas Classes Existentes","text":""},{"location":"regra-negocio/#farmacia","title":"Farmacia","text":"<p>Novos Atributos:</p> <ul> <li><code>estoque: List[Estoque]</code></li> <li><code>fornecedores: List[Fornecedor]</code></li> <li><code>movimentacoes: List[MovimentacaoEstoque]</code></li> </ul> <p>Novos M\u00e9todos:</p> <ul> <li><code>consultarEstoque()</code></li> <li><code>registrarEntrada(produto, quantidade)</code></li> <li><code>registrarSaida(produto, quantidade)</code></li> <li><code>listarProdutosVencidos()</code></li> <li><code>relatorioMovimentacoes()</code></li> </ul>"},{"location":"regra-negocio/#produto","title":"Produto","text":"<p>Novos Atributos:</p> <ul> <li><code>codigoBarras: str</code></li> <li><code>fornecedor: Fornecedor</code></li> </ul> <p>Novos M\u00e9todos:</p> <ul> <li><code>verificarValidade()</code></li> <li><code>associarFornecedor(fornecedor: Fornecedor)</code></li> </ul>"},{"location":"regra-negocio/#subclasses-de-produto","title":"Subclasses de Produto","text":""},{"location":"regra-negocio/#1-medicamento","title":"1. Medicamento","text":"<ul> <li><code>tarja: str</code> (ex: preta, vermelha, isento)</li> <li><code>necessitaReceita: bool</code></li> <li><code>principioAtivo: str</code></li> </ul>"},{"location":"regra-negocio/#2-cosmetico","title":"2. Cosmetico","text":"<ul> <li><code>tipoPele: str</code></li> <li><code>faixaEtaria: str</code></li> </ul>"},{"location":"regra-negocio/#3-suplementoalimentar","title":"3. SuplementoAlimentar","text":"<ul> <li><code>sabor: str</code></li> <li><code>tipo: str</code> (prote\u00edna, multivitam\u00ednico, energ\u00e9tico, etc.)</li> <li><code>restricoes: List[str]</code> (ex: lactose, gl\u00faten)</li> </ul>"}]}